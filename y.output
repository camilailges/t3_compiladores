   0  $accept : Prog $end

   1  Prog : Bloco

   2  Bloco : '{' LCmd '}'

   3  LCmd : LCmd C
   4       |

   5  C : ident '=' E ';'
   6    | IF '(' E ')' THEN C endif
   7    | IF '(' E ')' THEN C ELSE C endif

   8  E : E '+' E
   9    | E '-' E
  10    | E '*' E
  11    | E '/' E
  12    | num
  13    | ident

state 0
	$accept : . Prog $end  (0)

	'{'  shift 1
	.  error

	Prog  goto 2
	Bloco  goto 3


state 1
	Bloco : '{' . LCmd '}'  (2)
	LCmd : .  (4)

	.  reduce 4

	LCmd  goto 4


state 2
	$accept : Prog . $end  (0)

	$end  accept


state 3
	Prog : Bloco .  (1)

	.  reduce 1


state 4
	Bloco : '{' LCmd . '}'  (2)
	LCmd : LCmd . C  (3)

	IF  shift 5
	ident  shift 6
	'}'  shift 7
	.  error

	C  goto 8


state 5
	C : IF . '(' E ')' THEN C endif  (6)
	C : IF . '(' E ')' THEN C ELSE C endif  (7)

	'('  shift 9
	.  error


state 6
	C : ident . '=' E ';'  (5)

	'='  shift 10
	.  error


state 7
	Bloco : '{' LCmd '}' .  (2)

	.  reduce 2


state 8
	LCmd : LCmd C .  (3)

	.  reduce 3


state 9
	C : IF '(' . E ')' THEN C endif  (6)
	C : IF '(' . E ')' THEN C ELSE C endif  (7)

	num  shift 11
	ident  shift 12
	.  error

	E  goto 13


state 10
	C : ident '=' . E ';'  (5)

	num  shift 11
	ident  shift 12
	.  error

	E  goto 14


state 11
	E : num .  (12)

	.  reduce 12


state 12
	E : ident .  (13)

	.  reduce 13


state 13
	C : IF '(' E . ')' THEN C endif  (6)
	C : IF '(' E . ')' THEN C ELSE C endif  (7)
	E : E . '+' E  (8)
	E : E . '-' E  (9)
	E : E . '*' E  (10)
	E : E . '/' E  (11)

	'+'  shift 15
	'-'  shift 16
	'*'  shift 17
	'/'  shift 18
	')'  shift 19
	.  error


state 14
	C : ident '=' E . ';'  (5)
	E : E . '+' E  (8)
	E : E . '-' E  (9)
	E : E . '*' E  (10)
	E : E . '/' E  (11)

	'+'  shift 15
	'-'  shift 16
	'*'  shift 17
	'/'  shift 18
	';'  shift 20
	.  error


state 15
	E : E '+' . E  (8)

	num  shift 11
	ident  shift 12
	.  error

	E  goto 21


state 16
	E : E '-' . E  (9)

	num  shift 11
	ident  shift 12
	.  error

	E  goto 22


state 17
	E : E '*' . E  (10)

	num  shift 11
	ident  shift 12
	.  error

	E  goto 23


state 18
	E : E '/' . E  (11)

	num  shift 11
	ident  shift 12
	.  error

	E  goto 24


state 19
	C : IF '(' E ')' . THEN C endif  (6)
	C : IF '(' E ')' . THEN C ELSE C endif  (7)

	THEN  shift 25
	.  error


state 20
	C : ident '=' E ';' .  (5)

	.  reduce 5


state 21
	E : E . '+' E  (8)
	E : E '+' E .  (8)
	E : E . '-' E  (9)
	E : E . '*' E  (10)
	E : E . '/' E  (11)

	'*'  shift 17
	'/'  shift 18
	'+'  reduce 8
	'-'  reduce 8
	';'  reduce 8
	')'  reduce 8


state 22
	E : E . '+' E  (8)
	E : E . '-' E  (9)
	E : E '-' E .  (9)
	E : E . '*' E  (10)
	E : E . '/' E  (11)

	'*'  shift 17
	'/'  shift 18
	'+'  reduce 9
	'-'  reduce 9
	';'  reduce 9
	')'  reduce 9


state 23
	E : E . '+' E  (8)
	E : E . '-' E  (9)
	E : E . '*' E  (10)
	E : E '*' E .  (10)
	E : E . '/' E  (11)

	.  reduce 10


state 24
	E : E . '+' E  (8)
	E : E . '-' E  (9)
	E : E . '*' E  (10)
	E : E . '/' E  (11)
	E : E '/' E .  (11)

	.  reduce 11


state 25
	C : IF '(' E ')' THEN . C endif  (6)
	C : IF '(' E ')' THEN . C ELSE C endif  (7)

	IF  shift 5
	ident  shift 6
	.  error

	C  goto 26


state 26
	C : IF '(' E ')' THEN C . endif  (6)
	C : IF '(' E ')' THEN C . ELSE C endif  (7)

	ELSE  shift 27
	endif  shift 28
	.  error


state 27
	C : IF '(' E ')' THEN C ELSE . C endif  (7)

	IF  shift 5
	ident  shift 6
	.  error

	C  goto 29


state 28
	C : IF '(' E ')' THEN C endif .  (6)

	.  reduce 6


state 29
	C : IF '(' E ')' THEN C ELSE C . endif  (7)

	endif  shift 30
	.  error


state 30
	C : IF '(' E ')' THEN C ELSE C endif .  (7)

	.  reduce 7


21 terminals, 6 nonterminals
14 grammar rules, 31 states
